# encoding: utf-8
#!/usr/bin/env ruby

require 'net/http'
require 'net/https' # for ruby 1.8.x

begin
  require 'json'
rescue LoadError
  require File.expand_path("json_generator", File.dirname(__FILE__)) # for ruby 1.8.x
end
require 'shellwords'

Encoding.default_external = Encoding::UTF_8 if defined?(Encoding)

def get_info(key)
  `defaults read #{ Shellwords.escape(File.expand_path('../../Info.plist', __FILE__)) } #{key}`.chomp
end

# get id
user = IO.popen("whoami", "r+").gets.chomp
program = ARGV[0].to_s
idfile = "/Users/#{user}/Library/Gyazo/id"

id = ''
if File.exist?(idfile) then
  id = File.read(idfile).chomp
end

# capture png file
tmpfile = "/tmp/image_upload#{$$}.png"
imagefile = ARGV[1]
sound_file = File.dirname(program) + "/shutter.aiff"

if imagefile && File.exist?(imagefile) then
  imagedata = File.read(imagefile)
else
  system "screencapture -x -i \"#{tmpfile}\""
  exit unless File.exist?(tmpfile)

  system "afplay #{Shellwords.escape(sound_file)}"
  system "sips -d profile --deleteColorManagementProperties \"#{tmpfile}\""
  dpiWidth    = `sips -g dpiWidth "#{tmpfile}" | awk '/:/ {print $2}'`
  dpiHeight   = `sips -g dpiHeight "#{tmpfile}" | awk '/:/ {print $2}'`
  pixelWidth  = `sips -g pixelWidth "#{tmpfile}" | awk '/:/ {print $2}'`
  pixelHeight = `sips -g pixelHeight "#{tmpfile}" | awk '/:/ {print $2}'`
  if (dpiWidth.to_f > 72.0 and dpiHeight.to_f > 72.0) then
      width  =  pixelWidth.to_f * 72.0 / dpiWidth.to_f
      height =  pixelHeight.to_f* 72.0 / dpiHeight.to_f
      system "sips -s dpiWidth 72 -s dpiHeight 72 -z #{height} #{width} \"#{tmpfile}\""
  end
  # Certain versions of `sips -d profile` seems to add sRGB profile even it deletes original one.
  output = StringIO.new
  File.open(tmpfile, 'rb') do |input|
    output.write(input.read(8)) # png signaure
    while head = input.read(4 + 4)
      len, type = head.unpack('NA*')
      data_crc = input.read(len + 4)
      output.write(head + data_crc) if type != 'sRGB'
    end
  end
  File.delete(tmpfile)
  imagedata = output.string
end

# get front app name

front_app_name = `osascript -e '
set frontAppName to ""

try
  tell application "System Events"
    set frontApp to first application process whose frontmost is true
    set frontAppName to name of frontApp
  end tell
end try
return frontAppName'`.chomp

# get front window title and url

case front_app_name
  when "Google Chrome"
    front_window_data = `osascript -e '
    tell application "Google Chrome"
      set windowTitle to title of active tab of front window
      set windorUrl to URL of active tab of front window
    end tell
    return "Google Chrome" & "\n" & windowTitle & "\n" & windorUrl'`

  when "Safari"
    front_window_data = `osascript -e '

    tell application "Safari"
      set windowTitle to name of front document
      set windorUrl to URL of front document
    end tell
    return "Safari" & "\n" & windowTitle & "\n" & windorUrl'`

  when "firefox"
    front_window_data = `osascript -e '

    set frontAppName to "Firefox"
    tell application id "org.mozilla.firefox"
      set windowTitle to name of front window
    end tell

    set the clipboard to ""
    tell application "System Events" to tell process "Firefox"
      keystroke "l" using command down
      keystroke "c" using command down
    end tell
    delay 0.2
    set windorUrl to the clipboard
    return "Firefox" & "\n" & windowTitle & "\n" & windorUrl'`

  when "Opera"
    front_window_data = `osascript -e '

    try
      tell application "System Events"
        set frontApp to first application process whose frontmost is true
      end tell
    end try

    tell frontApp
      set windowTitle to name of front window
    end tell

    set the clipboard to ""
    tell application "System Events" to tell process "Opera"
      keystroke "l" using command down
      keystroke "c" using command down
    end tell
    delay 0.2
    set windorUrl to the clipboard
    return "Opera" & "\n" & windowTitle & "\n" & windorUrl'`

  else
    front_window_data = `osascript -e '
    set frontAppName to "#{front_app_name}"
    set windowTitle to ""
    set windorUrl to ""

    tell application "#{front_app_name}"
      try
        if name of front window is not equal to missing value then
          set windowTitle to name of front window
        end if
      end try
      try
        if name of front document is not equal to missing value then
          set windowTitle to name of front document
        end if
      end try
    end tell
    return frontAppName & "\n" & windowTitle & "\n" & windorUrl'`
end

window_app, window_title, window_url = front_window_data.to_s.split("\n")

metadata = JSON.generate({
  :app => window_app,
  :title => window_title,
  :url => window_url
})

# upload
boundary = '----BOUNDARYBOUNDARY----'

HOST = 'upload.gyazo.com'
bundle_identity = get_info('CFBundleIdentifier')
if bundle_identity == 'com.gyazo.mac.teams'
  CGI = '/teams/upload'
else
  CGI = '/upload.cgi'
end
PORT = 443

version = get_info('CFBundleVersion')
UA = "Gyazo/#{version}"

data = <<EOF
--#{boundary}\r
content-disposition: form-data; name="id"\r
\r
#{id}\r
--#{boundary}\r
content-disposition: form-data; name="metadata"\r
\r
#{metadata}\r
--#{boundary}\r
content-disposition: form-data; name="imagedata"; filename="gyazo.com"\r
\r
#{imagedata}\r
--#{boundary}--\r
EOF

header ={
  'Content-Length' => data.length.to_s,
  'Content-type' => "multipart/form-data; boundary=#{boundary}",
  'User-Agent' => UA
}

http = Net::HTTP.new(HOST, PORT)
http.use_ssl = true
http.start do |http|
  res = http.post(CGI, data, header)
  url = res.response.body
  IO.popen("pbcopy","r+"){|io|
    io.write url
    io.close
  }
  system "open #{url}"

  # save id
  newid = res.response['X-Gyazo-Id']
  if newid and newid != "" then
    if !File.exist?(File.dirname(idfile)) then
      Dir.mkdir(File.dirname(idfile))
    end
    if File.exist?(idfile) then
      File.rename(idfile, idfile+Time.new.strftime("_%Y%m%d%H%M%S.bak"))
    end
    File.open(idfile,"w").print(newid)
  end
end
